{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","valueChange","e","setState","currentValue","target","value","addElem","preventDefault","list","state","push","onDelete","index","splice","className","action","onSubmit","this","type","onChange","map","item","onClick","bind","class","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAoEeA,G,wDAhEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,YAAc,SAACC,GACb,EAAKC,SAAS,CACZC,aAAcF,EAAEG,OAAOC,SAVR,EAcnBC,QAAU,SAACL,GACTA,EAAEM,iBACF,IAAMC,EAAI,YAAO,EAAKC,MAAMD,MAC5B,GAA8B,IAA3B,EAAKC,MAAMN,aACZ,OAAO,EAETK,EAAKE,KAAK,EAAKD,MAAMN,cACrB,EAAKD,SAAS,CACZM,KAAMA,EACNL,aAAc,MAvBC,EA2BnBQ,SAAW,SAACC,GACV,IAAMJ,EAAI,YAAO,EAAKC,MAAMD,MAC5BA,EAAKK,OAAOD,EAAO,GACnB,EAAKV,SAAS,CACZM,KAAMA,KA7BR,EAAKC,MAAQ,CACXD,KAAM,GACNL,aAAc,IAJC,E,qDAoCT,IAAD,OACP,OACE,qCACA,2CACA,sBAAKW,UAAU,UAAf,UACE,uBAAMC,OAAO,GAAGC,SAAUC,KAAKX,QAA/B,UACE,uBAAOY,KAAK,OAAOC,SAAUF,KAAKjB,YAAaK,MAAOY,KAAKR,MAAMN,eACjE,uBAAOe,KAAK,SAASb,MAAM,WAE7B,6BAEIY,KAAKR,MAAMD,KAAKY,KAAI,SAACC,EAAMT,GACzB,OACE,sBAAKE,UAAU,eAAf,UACE,6BAAKO,IACL,iCAAQ,mBAAGC,QAAS,EAAKX,SAASY,KAAK,EAAMX,GAAQY,MAAM,yBAF1BZ,kB,GAlDjCa,cCSHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.17ec4eee.chunk.js","sourcesContent":["import './App.css';\nimport React, {Component} from 'react'\n\nclass App extends Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      list: [],\n      currentValue: \"\"\n    }\n  }\n\n  valueChange = (e) => {\n    this.setState({\n      currentValue: e.target.value\n    })\n  }\n\n  addElem = (e) => {\n    e.preventDefault()\n    const list = [...this.state.list]\n    if(this.state.currentValue == \"\") {\n      return false\n    }\n    list.push(this.state.currentValue)\n    this.setState({\n      list: list,\n      currentValue: \"\"\n    })\n  }\n\n  onDelete = (index) => {\n    const list = [...this.state.list]\n    list.splice(index, 1)\n    this.setState({\n      list: list\n    })\n  }\n\n\n  render() {\n    return(\n      <>\n      <h1>ToDo List</h1>\n      <div className=\"wrapper\">\n        <form action=\"\" onSubmit={this.addElem}>\n          <input type=\"text\" onChange={this.valueChange} value={this.state.currentValue}/>\n          <input type=\"submit\" value=\"Add\"/>\n        </form>\n        <ul>\n          {\n            this.state.list.map((item, index) => {\n              return(\n                <div className=\"item-wrapper\" key={index}>\n                  <li>{item}</li>\n                  <button><i onClick={this.onDelete.bind(this, index)} class=\"fas fa-trash-alt\"></i></button>\n                </div>\n              )\n            })\n  \n          }\n        </ul>\n      </div>\n      </>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}